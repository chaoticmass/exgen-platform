projects_dir = "/root/projects/c/";
make_dir = "make/";
modules_dir = "/usr/local/share/exgen/modules/";
projects = {
    {
	name = "exgen",
	working_dir = "exgen/",
	support_dir = "Release/",
	bin = "bin/exgen",
	src = "exgen.c",
	src_files = {
	    "src/globals.c",
	    "src/sqlite.c",
	    "src/net.c",
	    "src/modules.c",
	    "src/lua.c",
	    "src/core.c"
	},
	obj = "obj/exgen.o",
	include = "-I/usr/include/lua50 -Irote/ ",
	libs = "-ldl -pthread /usr/lib/i386-linux-gnu/libsqlite3.a /usr/lib/liblua50.a /usr/lib/liblualib50.a -I/usr/include/lua50 lib/librote.a /usr/lib/i386-linux-gnu/libutil.a /usr/lib/i386-linux-gnu/libm.a /usr/lib/i386-linux-gnu/libssl.a -lssl -lcrypto",
	buildtype = "dynamic_twopass",
	buildoptions = "-O3 -g",
	publish = 1,
	build = 1,
	module = 0
    },
    {
	name = "illution",
	working_dir = "illution/",
	support_dir = "Release/",
	bin = modules_dir.."illution",
	src = "illution.c",
	src_files = {
	    "src/globals.c",
	    "src/main.c",
	    "src/queue.c",
	    "src/gui.c",
	    "src/model.c",	    	    	    
	    "src/render.c",	    
	    "src/ode.c",	    
	    "src/lua.c",
	    "src/gif.c"
	},
	obj = "",
	include = "`lua-config --include` -Iinclude/ -Iinclude/ode/",
	libs = "`allegro-config --libs release --static` lib/libode.a lib/libjpgal.a",
	buildtype = "shared_onepass",
	buildoptions = "-g",
	publish = 1,
	build = 1,
	module = 1
    },
--[[    {
	name = "video",
	working_dir = "video/",
	support_dir = "Release/",
	bin = modules_dir.."video",
	src = "video.c",
	src_files = {
	    "src/globals.c",
	    "src/main.c",
	    "src/lua.c"
	},
	obj = "",
	include = "`lua-config --include`",
	libs = "-lavutil -lavformat -lavcodec -lswscale -lz -lbz2 -lavutil -lm ",
	buildtype = "shared_onepass",
	buildoptions = "",
	publish = 1,
	build = 1,
	module = 1
    }]]
}


function buildcmd(i) 
    if (projects[i].buildtype == "dynamic_twopass") then
	cmd = "#!/bin/bash\n".."gcc -w -rdynamic -g -o ".. projects[i].obj.." -c ".. projects[i].src  .." ".. projects[i].include .." ".. projects[i].buildoptions .."\n"
	cmd = cmd .. "gcc -s -w -rdynamic -g -o ".. projects[i].bin  .." ".. projects[i].obj  .." ".. projects[i].libs .. " ".. projects[i].buildoptions .."\n"
	return cmd
    elseif (projects[i].buildtype == "dynamic_onepass") then
	cmd = "#!/bin/bash\n".."gcc -w -O3 -rdynamic -g -o ".. projects[i].bin.." -c ".. projects[i].src  .." ".. projects[i].include .." ".. projects[i].libs .." ".. projects[i].buildoptions .."\n"
	return cmd
    elseif (projects[i].buildtype == "shared_onepass") then
	cmd = "#!/bin/bash\n".."gcc -s -w -O3 -shared -nostartfiles -fPIC -g -o ".. projects[i].bin .." ".. projects[i].src .." ".. projects[i].libs .." ".. projects[i].include .." ".. projects[i].buildoptions .."\n"
	return cmd
    elseif (projects[i].buildtype == "shared_twopass") then
	cmd = "#!/bin/bash\n".."gcc -w -O3 -shared -nostartfiles -fPIC -g -o ".. projects[i].obj.." -c ".. projects[i].src  .." ".. projects[i].include .." ".. projects[i].buildoptions .." ".. projects[i].libs .."\n"
	cmd = cmd .. "gcc -s -w -O3 -shared -nostartfiles -fPIC -g -o ".. projects[i].bin  .." ".. projects[i].obj  .." ".. projects[i].libs .."\n"
	return cmd
    
    end
end


--[[

    {
	name = "illution",
	working_dir = "illution/",
	support_dir = "Release/",
	bin = modules_dir.."illution",
	src = "illution.c",
	src_files = {
	    "src/globals.c",
	    "src/lua.c",
	},
	obj = "",
	include = "`lua-config --include` -Iinclude/",
	libs = "`allegro-config --version=5.0 --libs release --static` lib/libode.a",
	buildtype = "shared_onepass",
	buildoptions = "",
	publish = 1,
	build = 1,
	module = 1
    },
]]